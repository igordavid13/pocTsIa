import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

const token = process.env["GITHUB_TOKEN"];
const endpoint = "https://models.inference.ai.azure.com";
const modelName = "gpt-4o";

const client = new OpenAI({ baseURL: endpoint, apiKey: token });


export async function iaInfoProducts(markdownContent: string): Promise<string> {
    try {
        const response = await client.chat.completions.create({
            messages: [
                {
                    role: "system",
                    content: "The user will provide a json_master that contains product mappings for each item, starting with the prefix ['/products/slug'], along with extraneous text from web scraping. Your task is to Extract relevant product data from the provided Markdown file for each product and all products. Handle varying product specifications: Some products have different sets of specifications. Ensure that all available data is captured for each product. Ignore irrelevant text: Exclude any content in the Markdown that is not related to the product information. Merge the data: Combine the extracted product data with the corresponding product information from json_master, if a product in the json_master does not have a corresponding information in the markdown, display even so this product in json_output. Final JSON output: Each product should be represented with well-structured keys. Each key must contain only one value. If there are multiple values, use only the first one. Replace underscores in the variable names with spaces. Do not include links or product slugs in the final output. Handle missing information: If a product lacks information in the Markdown, simply omit it from the final result. Relevance: Ensure that the data in the final JSON is strictly based on what is available from both the Markdown file and from the json_master use the name and image. There is no arrays inside a product. Do not generate any information that doesn't exist in either source. The json output array does not contain a key."
                },
                { role: "user", content: markdownContent }
            ],
            temperature: 0.2,
            top_p: 1.0,
            max_tokens: 8000,
            model: modelName
        });
        const content = response.choices[0].message.content;

        if (content) {
            // Inserts line break at the end of each line
            const trimmed = content.trim().split('\n');

            // Removes the fist and last line that has: ''' generated by ChatGPT
            trimmed.shift();
            trimmed.pop();

            // Unite the lines for parse
            const jsonString = trimmed.join('\n').trim();
            console.log(jsonString);
            return JSON.parse(jsonString);
        }
        return '';
    } catch (error) {
        console.error('Error generating response:', error);
        return '';
    }
}


export async function iaGetPage(markdownContent: string): Promise<string> {
    try {
        const response = await client.chat.completions.create({
            messages: [
                {
                    role: "system",
                    content: "The user will provide a Markdown file that contains products, each starting with the prefix ['/products/slug'], along with extraneous text from web scraping. Your task is to extract all products data, ignore any extraneous text, and only answer with a JSON output, where each product is represented with well-structured keys and one value. One key must have only one value, if there is more than one value, only choose the first one. Each product must cointain only the keys: name, image and link to the product page, this key will be called link. If a variable name has '_' replace for ' '"
                },
                { role: "user", content: markdownContent }
            ],
            temperature: 0.2,
            top_p: 1.0,
            max_tokens: 8000,
            model: modelName
        });
        const content = response.choices[0].message.content;

        if (content) {
            // Inserts line break at the end of each line
            const trimmed = content.trim().split('\n');

            // Removes the fist and last line that has: ''' generated by ChatGPT
            trimmed.shift();
            trimmed.pop();

            // Unite the lines for parse
            const jsonString = trimmed.join('\n').trim();

            return jsonString;
        }
        return '';
    } catch (error) {
        console.error('Error generating response:', error);
        return '';
    }
}
